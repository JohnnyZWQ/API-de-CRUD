
- @Entity:  Marca uma classe como uma entidade que ser√° mapeada para uma tabela no banco.

- @GeneratedValue(generator = "UUID"):  Gera automaticamente um ID √∫nico do tipo UUID para o campo anotado com `@Id`.

- @RestController:  Transforma a classe em um controlador REST, retornando os dados no formato JSON.

- @RequestMapping("/"): Define o endpoint base para todas as requisi√ß√µes deste controlador.

- `@PostMapping`: Envia dados para cria√ß√£o (POST)
- `@GetMapping`: Busca informa√ß√µes (GET)
- `@PutMapping`: Atualiza√ß√£o (PUT)
- `@DeleteMapping`: Exclus√£o (DELETE)

- @SpringBootApplication:  √â uma combina√ß√£o de `@Configuration`, `@EnableAutoConfiguration` e `@ComponentScan`. 
Diz ao Spring para configurar a aplica√ß√£o automaticamente.

- H2 Database:   

O H2 √© um banco de dados em mem√≥ria usado para testes em aplica√ß√µes Spring Boot. 

- M√©todo `main()` na classe principal:  Inicia a aplica√ß√£o com `SpringApplication.run()`.

- JPA:

JPA (Java Persistence API) √© uma especifica√ß√£o do Java para trabalhar com banco de dados usando objetos Java.

- JpaRepository:   

√â uma interface do Spring Data que fornece m√©todos prontos para acessar o banco, como `findAll()`, `save()`, `deleteById()`.

- Maven:  

Maven √© um gerenciador de depend√™ncias.

- BCrypt:

√â uma biblioteca para criptografar senhas com seguran√ßa.

- FilterAuth:

Intercepta requisi√ß√µes no endpoint definido e verifica se o usu√°rio est√° autenticado via cabe√ßalho `Authorization`.

- HttpStatus.OK (200):

üîπ 200 OK = Requisi√ß√£o bem-sucedida

- HttpStatus.BAD_REQUEST (400):

Erro na requisi√ß√£o

- response.sendError(401, ...)`?  

Rejeita a requisi√ß√£o por falha na autentica√ß√£o.  

- HttpServletRequest:   Ele cont√©m informa√ß√µes da requisi√ß√£o HTTP, como headers, corpo e par√¢metros.  

- HttpServletResponse:     Ele representa a resposta do servidor, permitindo definir status HTTP, headers e corpo da resposta.  

POSTMAN:

O Postman √© uma ferramenta usada para testar APIs REST, 
permitindo enviar requisi√ß√µes HTTP (GET, POST, PUT, DELETE) e visualizar as respostas.  

- Como enviar um corpo (`body`) em uma requisi√ß√£o POST no Postman?  

{
  "name": "Jo√£o",
  "email": "joao@email.com",
  "password": "123456"
}